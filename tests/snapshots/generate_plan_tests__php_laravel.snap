---
source: tests/generate_plan_tests.rs
expression: plan
---
{
  "nixpacksVersion": "[version]",
  "buildImage": "[build_image]",
  "variables": {
    "IS_LARAVEL": "yes",
    "PORT": "80"
  },
  "staticAssets": {
    "nginx.template.conf": "worker_processes 5;\r\ndaemon off;\r\n\r\nworker_rlimit_nofile 8192;\r\n\r\nevents {\r\n  worker_connections  4096;  # Default: 1024\r\n}\r\n\r\nhttp {\r\n    include    $!{nginx}/conf/mime.types;\r\n    index    index.html index.htm index.php;\r\n\r\n    default_type application/octet-stream;\r\n    log_format   main '$remote_addr - $remote_user [$time_local]  $status '\r\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\r\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\r\n    access_log /dev/stdout;\r\n    error_log /dev/stdout;\r\n    sendfile     on;\r\n    tcp_nopush   on;\r\n    server_names_hash_bucket_size 128; # this seems to be required for some vhosts\r\n\r\n    server {\r\n        listen ${PORT};\r\n        listen [::]:${PORT};\r\n        server_name localhost;\r\n\r\n        $if(IS_LARAVEL) (\r\n            root /app/public;\r\n        ) else (\r\n            root /app;\r\n        )\r\n     \r\n        add_header X-Frame-Options \"SAMEORIGIN\";\r\n        add_header X-Content-Type-Options \"nosniff\";\r\n     \r\n        index index.php;\r\n     \r\n        charset utf-8;\r\n     \r\n        $if(IS_LARAVEL) (\r\n            location / {\r\n                try_files $uri $uri/ /index.php?$query_string;\r\n            }\r\n        ) else ()\r\n     \r\n        location = /favicon.ico { access_log off; log_not_found off; }\r\n        location = /robots.txt  { access_log off; log_not_found off; }\r\n     \r\n        $if(IS_LARAVEL) (\r\n            error_page 404 /index.php;\r\n        ) else ()\r\n     \r\n        location ~ \\.php$ {\r\n            fastcgi_pass 127.0.0.1:9000;\r\n            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\r\n            include $!{nginx}/conf/fastcgi_params;\r\n            include $!{nginx}/conf/fastcgi.conf;\r\n        }\r\n     \r\n        location ~ /\\.(?!well-known).* {\r\n            deny all;\r\n        }\r\n    }\r\n}",
    "php-fpm.conf": "[www]\r\nlisten = 127.0.0.1:9000\r\nuser = nobody\r\npm = dynamic\r\npm.max_children = 50\r\npm.min_spare_servers = 4\r\npm.max_spare_servers = 32\r\npm.start_servers = 18",
    "transform-config.pl": "#!/usr/bin/env perl\r\n\r\nundef $/;\r\n\r\nsub if_stmt {\r\n    my $condition = $_[0];\r\n    my $value = $_[1];\r\n    my $else = $_[2];\r\n\r\n    if($ENV{$condition} eq \"yes\") {\r\n        return $value;\r\n    } else {\r\n        return $else;\r\n    }\r\n}\r\n\r\nsub get_nix_path {\r\n    my $exe = $_[0];\r\n    my $path = `which $exe`;\r\n    $path =~ s/\\n//;\r\n    my $storePath = `nix-store -q $path`;\r\n    $storePath =~ s/\\n//;\r\n    return $storePath;\r\n}\r\n\r\nif ($#ARGV != 1) {\r\n    print STDERR \"Usage: $0 <config-file> <output-file>\\n\";\r\n    exit 1;\r\n}\r\nmy $infile = $ARGV[0];\r\nmy $outfile = $ARGV[1];\r\nopen(FH, '<', $infile) or die \"Could not open configuration file '$infile' $!\";\r\nmy $out = '';\r\nwhile (<FH>) {\r\n\r\n    # If statements\r\n    s{\r\n        \\$if\\s*\\((\\w+)\\)\\s*\\(\r\n            ([\\s\\S]*?)\r\n        \\)\\s*else\\s*\\(\r\n            ([\\s\\S]*?)\r\n        \\)\r\n    }{if_stmt($1, $2, $3)}egx;\r\n\r\n    # Variables\r\n    s/\\$\\{(\\w+)\\}/$ENV{$1}/eg;\r\n    \r\n    # Nix paths\r\n    s/\\$\\!\\{(\\w+)\\}/get_nix_path($1)/eg;\r\n\r\n    $out .= $_;\r\n}\r\nclose(FH);\r\nopen(FH, '>', $outfile) or die \"Could not write configuration file '$outfile' $!\";\r\nprint FH $out;\r\nclose(FH);"
  },
  "phases": [
    {
      "name": "install",
      "dependsOn": [
        "setup"
      ],
      "commands": [
        "mkdir -p /var/log/nginx && mkdir -p /var/cache/nginx",
        "composer install",
        "npm i"
      ]
    },
    {
      "name": "setup",
      "nixPackages": [
        {
          "name": "php81"
        },
        {
          "name": "perl"
        },
        {
          "name": "nginx"
        },
        {
          "name": "php81Packages.composer"
        },
        {
          "name": "nodejs"
        },
        {
          "name": "npm-8_x",
          "overlay": "https://github.com/railwayapp/nix-npm-overlay/archive/main.tar.gz"
        }
      ]
    },
    {
      "name": "build",
      "dependsOn": [
        "install"
      ],
      "commands": [
        "npm run prod"
      ]
    }
  ],
  "startPhase": {
    "cmd": "([ -e /app/storage ] && chmod -R ugo+w /app/storage); perl /assets/transform-config.pl /assets/nginx.template.conf /nginx.conf && echo \"Server starting on port $PORT\" && (php-fpm -y /assets/php-fpm.conf & nginx -c /nginx.conf)"
  }
}
