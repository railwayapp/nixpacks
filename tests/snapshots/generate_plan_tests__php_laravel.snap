---
source: tests/generate_plan_tests.rs
expression: plan
---
{
  "providers": [],
  "buildImage": "[build_image]",
  "variables": {
    "IS_LARAVEL": "yes",
    "NIXPACKS_METADATA": "php",
    "NIXPACKS_PHP_ROOT_DIR": "/app/public",
    "PORT": "80"
  },
  "staticAssets": {
    "Nixpacks/Config/Template.pm": "package Nixpacks::Config::Template;\n\nrequire 5.013002;\n\nuse Nixpacks::Nix;\n\nsub if_stmt {\n    my ($condition, $value, $else) = @_;\n\n    if($ENV{$condition} ne \"\") {\n        return replace_str($value);\n    } else {\n        return replace_str($else);\n    }\n}\n\nsub replace_str {\n    my ($input) = @_;\n    my $new = \n        $input \n        =~ \n            # If statements\n            s{\n                \\$if\\s*\\((\\w+)\\)\\s*\\(\n                    ([\\s\\S]*?)\n                \\)\\s*else\\s*\\(\n                    ([\\s\\S]*?)\n                \\)\n            }{if_stmt($1, $2, $3)}egxr\n        =~\n            # Variables\n            s/\\$\\{(\\w+)\\}/$ENV{$1}/egr\n        =~ \n            # Nix paths\n            s/\\$\\!\\{(\\w+)\\}/Nixpacks::Nix::get_nix_path($1)/egr;\n    return $new;\n}\n\nsub compile_template {\n    my ($infile, $outfile) = @_;\n    open(my $handle, '<', $infile) or die \"Could not open configuration file '$infile' $!\";\n    my $out = '';\n    while (my $line = <$handle>) {\n        $out .= replace_str($line);\n    }\n    close(FH);\n    open(FH, '>', $outfile) or die \"Could not write configuration file '$outfile' $!\";\n    print FH $out;\n    close(FH);\n}\n\n1;",
    "Nixpacks/Nix.pm": "package Nixpacks::Nix;\n\nsub get_nix_path {\n    my ($exe) = @_;\n    \n    my $path = `which $exe`;\n    $path =~ s/\\n//;\n    my $storePath = `nix-store -q $path`;\n    $storePath =~ s/\\n//;\n    return $storePath;\n}\n\n1;",
    "Nixpacks/Util/ChmodRecursive.pm": "# https://stackoverflow.com/a/3738367\npackage Nixpacks::Util::ChmodRecursive;\n\nuse File::Find;\n\nsub chmod_recursive {\n    my ($dir) = @_;\n    sub wanted\n    {\n        my $perm = -d $File::Find::name ? 0777 : 0666;\n        chmod $perm, $File::Find::name;\n    }\n    find(\\&wanted, $dir);\n}\n\n1;",
    "Nixpacks/Util/Laravel.pm": "package Nixpacks::Util::Laravel;\n\nuse File::Spec::Functions qw(catfile);\nuse Nixpacks::Util::Logger;\n\nmy %variable_hints = (\n    APP_ENV => 'You should probably set it to `production`.',\n);\n\nmy $logger = Nixpacks::Util::Logger->new(\"laravel\");\n\nsub is_laravel {\n    $ENV{IS_LARAVEL} ne \"\";\n}\n\nsub check_variable {\n    my ($varname) = @_;\n\n    if($ENV{$varname} eq \"\") {\n        my $hint = \"Your app configuration references the $varname environment variable, but it is not set.\";\n        if(defined $variable_hints{$varname}) {\n            $hint .= ' ' . $variable_hints{$varname};\n        }\n        $logger->warn($hint);\n    }\n}\n\nsub check_possible_env_errors {\n    my ($srcdir) = @_;\n\n    my $config_path = catfile($srcdir, 'config', '*.php');\n    my @config_files = glob($config_path);\n\n    foreach my $config_file (@config_files) {\n        open(FH, '<', $config_file);\n\n        while(<FH>) {\n            check_variable($1) if /env\\([\"']([^,]*)[\"']\\)/ and $1 ne \"APP_KEY\";\n        }\n    }\n\t\n\tif($ENV{APP_KEY} eq \"\") {\n\t\t$logger->warn(\"Your app key is not set! Please set a random 32-character string in your APP_KEY environment variable. This can be easily generated with `openssl rand -hex 16`.\")\n\t}\n}\n\n1;",
    "Nixpacks/Util/Logger.pm": "package Nixpacks::Util::Logger;\n\nsub new {\n    my ($class, $tag) = @_;\n    my $self = bless { tag => $tag }, $class;\n}\n\nsub log {\n    my ($self, $color, $message_type, $message) = @_;\n    my $tag = $self->{tag};\n    CORE::say \"\\e[${color}m[$tag:$message_type]\\e[0m $message\";\n}\n\nsub info {\n    my ($self, $message) = @_;\n    $self->log(34, \"info\", $message);\n}\n\nsub warn {\n    my ($self, $message) = @_;\n    $self->log(33, \"warn\", $message);\n}\n\nsub err {\n    my ($self, $message) = @_;\n    $self->log(31, \"error\", $message);\n}\n\n1;",
    "nginx.template.conf": "worker_processes 5;\ndaemon off;\n\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  # Default: 1024\n}\n\nhttp {\n    include    $!{nginx}/conf/mime.types;\n    index    index.html index.htm index.php;\n\n    default_type application/octet-stream;\n    log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log /dev/stdout;\n    error_log /dev/stdout;\n    sendfile     on;\n    tcp_nopush   on;\n    server_names_hash_bucket_size 128; # this seems to be required for some vhosts\n\n    server {\n        listen ${PORT};\n        listen [::]:${PORT};\n        server_name localhost;\n\n        $if(NIXPACKS_PHP_ROOT_DIR) (\n            root ${NIXPACKS_PHP_ROOT_DIR};\n        ) else (\n            root /app;\n        )\n     \n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-Content-Type-Options \"nosniff\";\n     \n        index index.php;\n     \n        charset utf-8;\n     \n        $if(IS_LARAVEL) (\n            location / {\n                try_files $uri $uri/ /index.php?$query_string;\n            }\n        ) else ()\n        \n        $if(NIXPACKS_PHP_FALLBACK_PATH) (\n          location / {\n            try_files $uri $uri/ ${NIXPACKS_PHP_FALLBACK_PATH}?$query_string;\n          }\n        ) else ()\n     \n        location = /favicon.ico { access_log off; log_not_found off; }\n        location = /robots.txt  { access_log off; log_not_found off; }\n     \n        $if(IS_LARAVEL) (\n            error_page 404 /index.php;\n        ) else ()\n     \n        location ~ \\.php$ {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n            include $!{nginx}/conf/fastcgi_params;\n            include $!{nginx}/conf/fastcgi.conf;\n        }\n     \n        location ~ /\\.(?!well-known).* {\n            deny all;\n        }\n    }\n}",
    "php-fpm.conf": "[www]\nlisten = 127.0.0.1:9000\nuser = nobody\npm = dynamic\npm.max_children = 50\npm.min_spare_servers = 4\npm.max_spare_servers = 32\npm.start_servers = 18\nclear_env = no\n",
    "prestart.pl": "#!/usr/bin/env perl\n\nundef $/;\n\nuse strict;\nuse warnings;\n\nuse FindBin;\nuse lib (\"$FindBin::RealBin\");\n\nuse File::Find;\nuse Nixpacks::Config::Template qw(compile_template);\nuse Nixpacks::Util::Logger;\nuse Nixpacks::Util::ChmodRecursive qw(chmod_recursive);\nuse Nixpacks::Util::Laravel qw(is_laravel check_possible_env_errors);\n\nmy $server_logger = Nixpacks::Util::Logger->new(\"server\");\n\nNixpacks::Util::ChmodRecursive::chmod_recursive(\"/app/storage\") if -e \"/app/storage\";\n\nif ($#ARGV != 1) {\n    print STDERR \"Usage: $0 <config-file> <output-file>\\n\";\n    exit 1;\n}\n\nif(Nixpacks::Util::Laravel::is_laravel()) {\n    Nixpacks::Util::Laravel::check_possible_env_errors(\"/app\");\n}\n\nNixpacks::Config::Template::compile_template($ARGV[0], $ARGV[1]);\nmy $port = $ENV{\"PORT\"};\n$server_logger->info(\"Server starting on port $port\");"
  },
  "phases": {
    "build": {
      "name": "build",
      "dependsOn": [
        "install"
      ],
      "cmds": [
        "npm run prod"
      ]
    },
    "install": {
      "name": "install",
      "dependsOn": [
        "setup"
      ],
      "cmds": [
        "mkdir -p /var/log/nginx && mkdir -p /var/cache/nginx",
        "composer install --ignore-platform-reqs",
        "npm i"
      ]
    },
    "setup": {
      "name": "setup",
      "nixPkgs": [
        "(php81.withExtensions (pe: pe.enabled ++ []))",
        "perl",
        "nginx",
        "libmysqlclient",
        "php81Packages.composer",
        "nodejs_18",
        "npm-9_x"
      ],
      "nixLibs": [
        "libmysqlclient"
      ],
      "nixOverlays": [
        "https://github.com/railwayapp/nix-npm-overlay/archive/main.tar.gz"
      ],
      "nixpkgsArchive": "[archive]"
    }
  },
  "start": {
    "cmd": "perl /assets/prestart.pl /assets/nginx.template.conf /nginx.conf && (php-fpm -y /assets/php-fpm.conf & nginx -c /nginx.conf)"
  }
}
