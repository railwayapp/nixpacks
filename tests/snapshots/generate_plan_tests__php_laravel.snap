---
source: tests/generate_plan_tests.rs
expression: plan
---
{
  "providers": [],
  "buildImage": "[build_image]",
  "variables": {
    "IS_LARAVEL": "yes",
    "NIXPACKS_METADATA": "php",
    "PORT": "80"
  },
  "staticAssets": {
    "nginx.template.conf": "worker_processes 5;\ndaemon off;\n\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  # Default: 1024\n}\n\nhttp {\n    include    $!{nginx}/conf/mime.types;\n    index    index.html index.htm index.php;\n\n    default_type application/octet-stream;\n    log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log /dev/stdout;\n    error_log /dev/stdout;\n    sendfile     on;\n    tcp_nopush   on;\n    server_names_hash_bucket_size 128; # this seems to be required for some vhosts\n\n    server {\n        listen ${PORT};\n        listen [::]:${PORT};\n        server_name localhost;\n\n        $if(IS_LARAVEL) (\n            root /app/public;\n        ) else (\n            root /app;\n        )\n     \n        add_header X-Frame-Options \"SAMEORIGIN\";\n        add_header X-Content-Type-Options \"nosniff\";\n     \n        index index.php;\n     \n        charset utf-8;\n     \n        $if(IS_LARAVEL) (\n            location / {\n                try_files $uri $uri/ /index.php?$query_string;\n            }\n        ) else ()\n     \n        location = /favicon.ico { access_log off; log_not_found off; }\n        location = /robots.txt  { access_log off; log_not_found off; }\n     \n        $if(IS_LARAVEL) (\n            error_page 404 /index.php;\n        ) else ()\n     \n        location ~ \\.php$ {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n            include $!{nginx}/conf/fastcgi_params;\n            include $!{nginx}/conf/fastcgi.conf;\n        }\n     \n        location ~ /\\.(?!well-known).* {\n            deny all;\n        }\n    }\n}",
    "php-fpm.conf": "[www]\nlisten = 127.0.0.1:9000\nuser = nobody\npm = dynamic\npm.max_children = 50\npm.min_spare_servers = 4\npm.max_spare_servers = 32\npm.start_servers = 18\nclear_env = no\n",
    "transform-config.pl": "#!/usr/bin/env perl\n\nundef $/;\n\nsub if_stmt {\n    my $condition = $_[0];\n    my $value = $_[1];\n    my $else = $_[2];\n\n    if($ENV{$condition} eq \"yes\") {\n        return $value;\n    } else {\n        return $else;\n    }\n}\n\nsub get_nix_path {\n    my $exe = $_[0];\n    my $path = `which $exe`;\n    $path =~ s/\\n//;\n    my $storePath = `nix-store -q $path`;\n    $storePath =~ s/\\n//;\n    return $storePath;\n}\n\nif ($#ARGV != 1) {\n    print STDERR \"Usage: $0 <config-file> <output-file>\\n\";\n    exit 1;\n}\nmy $infile = $ARGV[0];\nmy $outfile = $ARGV[1];\nopen(FH, '<', $infile) or die \"Could not open configuration file '$infile' $!\";\nmy $out = '';\nwhile (<FH>) {\n\n    # If statements\n    s{\n        \\$if\\s*\\((\\w+)\\)\\s*\\(\n            ([\\s\\S]*?)\n        \\)\\s*else\\s*\\(\n            ([\\s\\S]*?)\n        \\)\n    }{if_stmt($1, $2, $3)}egx;\n\n    # Variables\n    s/\\$\\{(\\w+)\\}/$ENV{$1}/eg;\n    \n    # Nix paths\n    s/\\$\\!\\{(\\w+)\\}/get_nix_path($1)/eg;\n\n    $out .= $_;\n}\nclose(FH);\nopen(FH, '>', $outfile) or die \"Could not write configuration file '$outfile' $!\";\nprint FH $out;\nclose(FH);"
  },
  "phases": {
    "build": {
      "name": "build",
      "dependsOn": [
        "install"
      ],
      "cmds": [
        "npm run prod"
      ]
    },
    "install": {
      "name": "install",
      "dependsOn": [
        "setup"
      ],
      "cmds": [
        "mkdir -p /var/log/nginx && mkdir -p /var/cache/nginx",
        "composer install",
        "npm i"
      ]
    },
    "setup": {
      "name": "setup",
      "nixPkgs": [
        "php81",
        "perl",
        "nginx",
        "php81Packages.composer",
        "nodejs-16_x",
        "npm-8_x"
      ],
      "nixOverlays": [
        "https://github.com/railwayapp/nix-npm-overlay/archive/main.tar.gz"
      ],
      "nixpkgsArchive": "[archive]"
    }
  },
  "start": {
    "cmd": "([ -e /app/storage ] && chmod -R ugo+w /app/storage); perl /assets/transform-config.pl /assets/nginx.template.conf /nginx.conf && echo \"Server starting on port $PORT\" && (php-fpm -y /assets/php-fpm.conf & nginx -c /nginx.conf)"
  }
}
